import os
import json
import re
from telegram.helpers import escape_markdown
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (ApplicationBuilder, ContextTypes, ConversationHandler, CallbackQueryHandler, MessageHandler, filters, CommandHandler)
from dotenv import load_dotenv
from datetime import datetime
from sqlalchemy import create_engine, Column, Integer, String, DateTime
from sqlalchemy.orm import declarative_base, sessionmaker, scoped_session
from apscheduler.schedulers.background import BackgroundScheduler
import asyncio

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

if not TELEGRAM_BOT_TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à .env —Ñ–∞–π–ª.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
Base = declarative_base()
engine = create_engine('sqlite:///posts.db')
Session = scoped_session(sessionmaker(bind=engine))

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–∞–±–ª–∏—Ü–∞ –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
class Post(Base):
    __tablename__ = 'posts'
    id = Column(Integer, primary_key=True)
    text = Column(String)
    media = Column(String, nullable=True)
    publish_time = Column(DateTime)
    reactions = Column(String, nullable=True)
    buttons = Column(String, nullable=True)
    published = Column(Integer, default=0)

Base.metadata.create_all(engine)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á
scheduler = BackgroundScheduler()
scheduler.start()

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª–∏—Ç–∏–∫–∏ —Ü–∏–∫–ª–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è Windows
if os.name == 'nt':
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
TEXT, MEDIA, BUTTONS, REACTIONS, SCHEDULE, CONFIRM = range(6)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [
        [InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç", callback_data='new_post')],
        [InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã", callback_data='view_posts')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –ø–æ—Å—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞.", reply_markup=reply_markup)
    return ConversationHandler.END

# –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
async def new_post_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞:")
    return TEXT

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞
async def get_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['text'] = escape_markdown(update.message.text, version=2)
    keyboard = [[InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='skip_media')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥.", reply_markup=reply_markup)
    return MEDIA

# –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–¥–∏–∞-—Ñ–∞–π–ª–∞
async def get_media(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['media'] = update.message.photo[-1].file_id if update.message.photo else None
    await ask_for_buttons(update, context)
    return BUTTONS

# –ü—Ä–æ–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞
async def skip_media(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data['media'] = None
    await ask_for_buttons(query, context)
    return BUTTONS

# –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
async def ask_for_buttons(update_or_query, context: ContextTypes.DEFAULT_TYPE) -> None:
    message = "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ —Å –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞–º–∏? –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∏ URL —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ú–æ–π —Å–∞–π—Ç, https://example.com'). –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥."
    if isinstance(update_or_query, Update):
        await update_or_query.message.reply_text(message, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='skip_buttons')]]))
    else:
        await update_or_query.edit_message_text(message, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='skip_buttons')]]))

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞–º–∏
async def get_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    buttons_data = update.message.text.split(',')
    if len(buttons_data) == 2:
        context.user_data['buttons'] = [{"text": buttons_data[0].strip(), "url": buttons_data[1].strip()}]
    else:
        context.user_data['buttons'] = []
    await ask_for_reactions(update, context)
    return REACTIONS

# –ü—Ä–æ–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
async def skip_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data['buttons'] = []
    await ask_for_reactions(query, context)
    return REACTIONS

# –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–π
async def ask_for_reactions(update_or_query, context: ContextTypes.DEFAULT_TYPE) -> None:
    message = "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏–∏? –í–≤–µ–¥–∏—Ç–µ –¥–æ —á–µ—Ç—ã—Ä–µ—Ö —ç–º–æ–¥–∑–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'üëç,üëé,‚ù§Ô∏è,üòÇ'). –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥."
    if isinstance(update_or_query, Update):
        await update_or_query.message.reply_text(message, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='skip_reactions')]]))
    else:
        await update_or_query.edit_message_text(message, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='skip_reactions')]]))

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–π
async def get_reactions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    reactions_data = update.message.text.split(',')
    context.user_data['reactions'] = [reaction.strip() for reaction in reactions_data[:4]]
    await ask_for_schedule(update, context)
    return SCHEDULE

# –ü—Ä–æ–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–π
async def skip_reactions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data['reactions'] = []
    await ask_for_schedule(query, context)
    return SCHEDULE

# –ó–∞–ø—Ä–æ—Å –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
async def ask_for_schedule(update_or_query, context: ContextTypes.DEFAULT_TYPE) -> None:
    message = "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2023-12-31 18:30):"
    if isinstance(update_or_query, Update):
        await update_or_query.message.reply_text(message)
    else:
        await update_or_query.edit_message_text(message)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
async def schedule_post(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        publish_time = datetime.strptime(update.message.text, '%Y-%m-%d %H:%M')
        if publish_time <= datetime.now():
            await update.message.reply_text("–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return SCHEDULE
        context.user_data['publish_time'] = publish_time
        keyboard = [
            [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='confirm')],
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞:", reply_markup=reply_markup)
        return CONFIRM
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return SCHEDULE

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
async def confirm_post(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    if query.data == 'confirm':
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            with Session() as session:
                new_post = Post(
                    text=context.user_data['text'],
                    media=context.user_data.get('media'),
                    buttons=json.dumps(context.user_data.get('buttons', []), ensure_ascii=False),
                    reactions=json.dumps(context.user_data.get('reactions', []), ensure_ascii=False),
                    publish_time=context.user_data['publish_time']
                )
                session.add(new_post)
                session.commit()

                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
                loop = asyncio.get_event_loop()
                scheduler.add_job(publish_post_wrapper, 'date', run_date=context.user_data['publish_time'], args=[new_post.id, loop])

                await query.edit_message_text(text="–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω!")
                logger.info(f"–ü–æ—Å—Ç —Å ID {new_post.id} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {context.user_data['publish_time']}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞: {e}")
            await query.edit_message_text(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        await query.edit_message_text(text="–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞
def publish_post_wrapper(post_id: int, loop):
    asyncio.run_coroutine_threadsafe(publish_post(post_id), loop)

# –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞
async def publish_post(post_id: int) -> None:
    with Session() as session:
        try:
            post = session.query(Post).filter_by(id=post_id).first()
            if post and not post.published:
                chat_id = -1002294321394  # ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π
                application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
                async with application:
                    buttons = json.loads(post.buttons) if post.buttons else []
                    reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton(button["text"], url=button["url"]) for button in buttons]]) if buttons else None

                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Ä–µ–∞–∫—Ü–∏–π
                    try:
                        reactions = json.loads(post.reactions) if post.reactions and post.reactions != 'null' else []
                    except json.JSONDecodeError:
                        reactions = []
                    if reactions:
                        reaction_buttons = [InlineKeyboardButton(reaction, callback_data=f'react_{post_id}_{reaction}') for reaction in reactions]
                        if reply_markup:
                            reply_markup = InlineKeyboardMarkup(reply_markup.inline_keyboard + tuple([reaction_buttons]))
                        else:
                            reply_markup = InlineKeyboardMarkup([reaction_buttons])

                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è
                    logger.info(f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ —Å ID {post_id} –≤ –∫–∞–Ω–∞–ª {chat_id}. –¢–µ–∫—Å—Ç: {post.text}")
                    if post.media:
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —Å media_id: {post.media}")
                        await application.bot.send_photo(chat_id=chat_id, photo=post.media, caption=post.text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
                    else:
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –º–µ–¥–∏–∞")
                        await application.bot.send_message(chat_id=chat_id, text=post.text, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=reply_markup, disable_web_page_preview=True)
                    logger.info(f"–ü–æ—Å—Ç —Å ID {post_id} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª {chat_id}")
                post.published = 1
                session.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ —Å ID {post_id}: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text('–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ.')
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
async def view_posts(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    with Session() as session:
        posts = session.query(Post).filter_by(published=0).all()
        if posts:
            message = "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:\n"
            for post in posts:
                message += f"\nID: {post.id}\n–¢–µ–∫—Å—Ç: {post.text}\n–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {post.publish_time.strftime('%Y-%m-%d %H:%M')}\n"
        else:
            message = "–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤."
        await query.edit_message_text(text=message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –ø–æ—Å—Ç
async def handle_reaction(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    data = query.data
    _, post_id, reaction = data.split('_')
    with Session() as session:
        try:
            post = session.query(Post).filter_by(id=int(post_id)).first()
            if post:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–ª—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏)
                await query.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏: {reaction}')
                logger.info(f'–†–µ–∞–∫—Ü–∏—è {reaction} –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è –ø–æ—Å—Ç–∞ —Å ID {post_id}')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –ø–æ—Å—Ç —Å ID {post_id}: {e}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main() -> None:
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(new_post_button, pattern='^new_post$')],
        states={
            TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_text)],
            MEDIA: [MessageHandler(filters.PHOTO, get_media), CallbackQueryHandler(skip_media, pattern='^skip_media$')],
            BUTTONS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_buttons), CallbackQueryHandler(skip_buttons, pattern='^skip_buttons$')],
            REACTIONS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_reactions), CallbackQueryHandler(skip_reactions, pattern='^skip_reactions$')],
            SCHEDULE: [MessageHandler(filters.TEXT & ~filters.COMMAND, schedule_post)],
            CONFIRM: [CallbackQueryHandler(confirm_post, pattern='^(confirm|cancel)$')],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(view_posts, pattern='^view_posts$'))
    application.add_handler(CallbackQueryHandler(handle_reaction, pattern=r'^react_\d+_.+$'))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await application.initialize()
    await application.start()
    await application.updater.start_polling()

    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª, —á—Ç–æ–±—ã –±–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å
    await asyncio.Event().wait()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        scheduler.shutdown()
